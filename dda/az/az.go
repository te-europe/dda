package az

// Language: go
// Path: dda\az\az.go
// Wrapper for interacting with the az cli

import (
	"encoding/json"
	"fmt"
	"os/exec"
	"regexp"
	"time"
)

// Ensure that the az cli is installed
func IsInstalled() bool {
	cmd := exec.Command("az", "--version")
	_, err := cmd.Output()

	return err == nil
}

type User struct {
	EnvironmentName string `json:"environmentName"`
	HomeTenantId    string `json:"homeTenantId"`
	Id              string `json:"id"`
	IsDefault       bool   `json:"isDefault"`
	Name            string `json:"name"`
	State           string `json:"state"`
	TenantId        string `json:"tenantId"`
	User            struct {
		Name string `json:"name"`
		Type string `json:"type"`
	} `json:"user"`
}

func IsLoggedIn() bool {
	cmd := exec.Command("az", "account", "show")
	stdout, err := cmd.Output()

	if err != nil {
		return false
	}

	// Read stdout as json
	var user User
	err = json.Unmarshal(stdout, &user)
	if err != nil {
		return false
	}

	return user.State != ""
}

type ContainerResource struct {
	Containers []struct {
		Command              interface{}   `json:"command"`
		EnvironmentVariables []interface{} `json:"environmentVariables"`
		Image                string        `json:"image"`
		InstanceView         struct {
			CurrentState struct {
				DetailStatus string      `json:"detailStatus"`
				ExitCode     interface{} `json:"exitCode"`
				FinishTime   interface{} `json:"finishTime"`
				StartTime    time.Time   `json:"startTime"`
				State        string      `json:"state"`
			} `json:"currentState"`
			Events        interface{} `json:"events"`
			PreviousState interface{} `json:"previousState"`
			RestartCount  int         `json:"restartCount"`
		} `json:"instanceView"`
		LivenessProbe interface{} `json:"livenessProbe"`
		Name          string      `json:"name"`
		Ports         []struct {
			Port     int    `json:"port"`
			Protocol string `json:"protocol"`
		} `json:"ports"`
		ReadinessProbe interface{} `json:"readinessProbe"`
		Resources      struct {
			Limits   interface{} `json:"limits"`
			Requests struct {
				CPU        float64     `json:"cpu"`
				Gpu        interface{} `json:"gpu"`
				MemoryInGb float64     `json:"memoryInGb"`
			} `json:"requests"`
		} `json:"resources"`
		VolumeMounts interface{} `json:"volumeMounts"`
	} `json:"containers"`
	Diagnostics              interface{}   `json:"diagnostics"`
	DNSConfig                interface{}   `json:"dnsConfig"`
	EncryptionProperties     interface{}   `json:"encryptionProperties"`
	ID                       string        `json:"id"`
	Identity                 interface{}   `json:"identity"`
	ImageRegistryCredentials interface{}   `json:"imageRegistryCredentials"`
	InitContainers           []interface{} `json:"initContainers"`
	InstanceView             struct {
		Events []interface{} `json:"events"`
		State  string        `json:"state"`
	} `json:"instanceView"`
	IPAddress struct {
		AutoGeneratedDomainNameLabelScope string      `json:"autoGeneratedDomainNameLabelScope"`
		DNSNameLabel                      interface{} `json:"dnsNameLabel"`
		Fqdn                              interface{} `json:"fqdn"`
		IP                                string      `json:"ip"`
		Ports                             []struct {
			Port     int    `json:"port"`
			Protocol string `json:"protocol"`
		} `json:"ports"`
		Type string `json:"type"`
	} `json:"ipAddress"`
	Location          string      `json:"location"`
	Name              string      `json:"name"`
	OsType            string      `json:"osType"`
	ProvisioningState string      `json:"provisioningState"`
	ResourceGroup     string      `json:"resourceGroup"`
	RestartPolicy     string      `json:"restartPolicy"`
	Sku               string      `json:"sku"`
	SubnetIds         interface{} `json:"subnetIds"`
	Tags              interface{} `json:"tags"`
	Type              string      `json:"type"`
	Volumes           interface{} `json:"volumes"`
	Zones             interface{} `json:"zones"`
}

func getContainerIp(containerId string) (string, error) {
	cmd := exec.Command("az", "container", "show", "--ids", containerId)

	stdout, err := cmd.CombinedOutput()
	if err != nil {
		return "", err
	}

	cmd.Start()
	cmd.Wait()

	// Marshall output into a ContainerStruct

	var container ContainerResource

	err = json.Unmarshal(stdout, &container)
	if err != nil {
		return "", err
	}

	return container.IPAddress.IP, nil
}

func getJupyterToken(containerId string) (string, error) {

	r, _ := regexp.Compile(`token=\w+`)

	// Execute the command to get the logs
	cmd := exec.Command("az", "container", "logs", "--ids", containerId)
	stdout, err := cmd.CombinedOutput()
	if err != nil {
		return "", err
	}
	cmd.Start()
	cmd.Wait()

	outputString := string(stdout)
	// Find the token
	token := r.FindString(outputString)
	return token, nil
}

func GetJupyterServerAddress(containerId string) (string, error) {

	ip, err := getContainerIp(containerId)
	if err != nil {
		return "", err
	}

	token, err := getJupyterToken(containerId)
	if err != nil {
		return "", err
	}

	return fmt.Sprintf("http://%s:8888/?%s", ip, token), nil
}
